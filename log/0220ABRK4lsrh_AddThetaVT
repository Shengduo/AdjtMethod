/home/shengduo/anaconda3/lib/python3.9/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.24.1
  warnings.warn(f"A NumPy version >={np_minversion} and <{np_maxversion}"
########################################  Total Iteration 0 ########################################
Time cost in computing gradients:  0.7793080806732178
Time cost in computing gradients:  0.7090215682983398
========================================
Initial descent succeeds:  tensor(True)
Observation:  tensor(1.0250)
Gradient (scaled):  tensor([ 135.4397, -809.2581,    7.2875,   51.2046])
beta:  tensor([0.0080, 0.0120, 0.1000, 0.5800])
Relative error of observation:  tensor(0.0005)
Time cost in computing gradients:  0.6909952163696289
========================================
The 1th descent succeeds:  tensor(False)
Gradient (scaled):  tensor([-1113.7838,  -411.4313,     4.3780,    25.1313])
beta:  tensor([0.0079, 0.0123, 0.1000, 0.5800])
Relative error of observation:  tensor(0.0005)
Time cost in computing gradients:  0.6893250942230225
========================================
The 2th descent succeeds:  tensor(True)
Gradient (scaled):  tensor([-6.6803e+02, -3.2121e+01, -8.9210e-01,  5.3037e-01])
beta:  tensor([0.0095, 0.0129, 0.1000, 0.5800])
Relative error of observation:  tensor(0.0005)
Traceback (most recent call last):
  File "/home/shengduo/InverseProblems/AdjtMethod/grad_main_newVT_AddTheta.py", line 190, in <module>
    myGradBB.run()
  File "/home/shengduo/InverseProblems/AdjtMethod/GradientDescent.py", line 197, in run
    success = self.oneDescent()
  File "/home/shengduo/InverseProblems/AdjtMethod/GradientDescent.py", line 177, in oneDescent
    return self.lineSearch(BBStepSize)
  File "/home/shengduo/InverseProblems/AdjtMethod/GradientDescent.py", line 235, in lineSearch
    obj_trial, grad_trial = self.objGrad_func(self.alpha0, self.VT, beta_trial, self.y0, self.targ_y, 
  File "/home/shengduo/InverseProblems/AdjtMethod/GradientDescent.py", line 38, in objGradFunc
    this_seq = TimeSequenceGen(T, NofTPts, this_SpringSlider, 
  File "/home/shengduo/InverseProblems/AdjtMethod/TimeSequenceGen.py", line 42, in __init__
    self.default_y = self.calculateYAtT(self.t)
  File "/home/shengduo/InverseProblems/AdjtMethod/TimeSequenceGen.py", line 103, in calculateYAtT
    y = odeint(self.DyDt, self.MFParams.y0, t, 
  File "/home/shengduo/anaconda3/lib/python3.9/site-packages/torchdiffeq/_impl/odeint.py", line 77, in odeint
    solution = solver.integrate(t)
  File "/home/shengduo/anaconda3/lib/python3.9/site-packages/torchdiffeq/_impl/solvers.py", line 105, in integrate
    dy, f0 = self._step_func(self.func, t0, dt, t1, y0)
  File "/home/shengduo/anaconda3/lib/python3.9/site-packages/torchdiffeq/_impl/fixed_grid.py", line 29, in _step_func
    return rk4_alt_step_func(func, t0, dt, t1, y0, f0=f0, perturb=self.perturb), f0
  File "/home/shengduo/anaconda3/lib/python3.9/site-packages/torchdiffeq/_impl/rk_common.py", line 111, in rk4_alt_step_func
    k2 = func(t0 + dt * _one_third, y0 + dt * k1 * _one_third)
  File "/home/shengduo/anaconda3/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/shengduo/anaconda3/lib/python3.9/site-packages/torchdiffeq/_impl/misc.py", line 189, in forward
    return self.base_func(t, y)
  File "/home/shengduo/InverseProblems/AdjtMethod/TimeSequenceGen.py", line 73, in DyDt
    y[1] / 2.e-6 * torch.exp((fStar + b * torch.log(1.e-6 * y[2] * DRSInv)) / a)
KeyboardInterrupt
